#!/bin/sh

L(){
    echo -e "\e[33m$@\e[0m"
}

init(){
    L "INIT: $0"
    mkdir proc sys linux
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -t tmpfs none /dev
    # hot plug
    mdev -s

    # mount usr data as linux linux rootfs
    mount -t ext4 -o noatime,errors=panic /dev/mmcblk0p7 /linux

    # Extract android initramfs if contain android initrams
    if [ -e /android.cpio ]; then
        L "Extracting android initramfs.."
        [ -d /linux/android ] || mkdir /linux/android
        cd /linux/android
        cpio -id -F /android.cpio
        chmod 700 * 2>/dev/null
        cd /
    fi
    # if no busybox
    if [ ! -e /linux/bin/busybox ] && [ ! -e /linux/usr/bin/busybox ]; then
        cp -a /bin/busybox /linux/bin/
    fi

    # android chroot helper
    if [ ! -x /linux/bin/android ]; then
        cat <<EOF > /linux/bin/android
#!/bin/sh
export PATH="/system/bin:/system/xbin:/sbin"
`busybox which chroot` /android /system/bin/sh
export PATH=$PATH
EOF
    chmod +x /linux/bin/android
    fi

    # Move kernel generated blockdevice link
    mv emmc@* /linux/android/
    # copy this script to call nextstage
    cp -a $0 /linux/init_multi    
    # uncomment if you want terminal before init,ctrl+D to continue
    #getty -nl /bin/sh 115200 /dev/ttyMT0 linux

    if [ -x /linux/android/init ] && [ -x /linux/init_multi ]; then
        umount /proc
        umount /sys
        umount /dev
        exec switch_root /linux /init_multi
    fi

    L "Incorrect init. entering interactive mode."
    exec getty -nl /bin/sh 115200 /dev/ttyMT0 linux
}

# your are in switched root
init_multi(){
    L "Waiting Android init"
    chroot /android /init &    
    C=0
    #while [ ! -e /android/dev/.coldboot_done ]; do
    while [ -z "$(grep 'BOOT_Animation:START' /android/proc/bootprof)" ]; do
        C=$(($C+1))
        L "init_wait: $C"
        if [ "$(($C % 10))" = "0" ]; then
            cat /android/proc/bootprof
        fi
        sleep 1
    done
    L "Android init done, mounting sysfs on linux"
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -o bind /android/dev /dev
    mount -o bind /android/dev/pts /dev/pts
    mount -o bind /android/dev/socket /dev/socket    
    /etc/rc.local
    busybox nc -p 1234 -lk -e bash &
    echo "Done linux is ready."
    echo "- connect at port 1234"
    echo "- or type 'android' to chroot in android"
    exec busybox sh < /dev/ttyMT0 > /dev/ttyMT0 2>&1
}

# call function based on this filename
${0##*/}
